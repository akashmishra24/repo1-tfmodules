name: Auto Tagging New

on:
  pull_request:
    types:
      - closed
  push:
    branches:
      - main

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

      - name: Determine version increment
        id: determine_increment
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.event.pull_request.merge_commit_sha }})
          if [[ $COMMIT_MSG =~ \[major\] ]]; then
            echo "VERSION_INCREMENT=major" >> $GITHUB_ENV
          elif [[ $COMMIT_MSG =~ \[minor\] ]]; then
            echo "VERSION_INCREMENT=minor" >> $GITHUB_ENV
          elif [[ $COMMIT_MSG =~ \[patch\] ]]; then
            echo "VERSION_INCREMENT=patch" >> $GITHUB_ENV
          else
            echo "VERSION_INCREMENT=none" >> $GITHUB_ENV
          fi

      - name: Get current version
        id: get_current_version
        run: |
          LAST_TAG=$(git describe --abbrev=0 --tags 2>/dev/null || echo "")
          if [[ -z $LAST_TAG ]]; then
            VERSION="v1.0.0"
          else
            VERSION=${LAST_TAG}
          fi
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate new version
        id: generate_version
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "${{ env.CURRENT_VERSION }}"
          MAJOR=${VERSION_PARTS[0]#v}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
  
          if [[ "${{ env.VERSION_INCREMENT }}" == "major" ]]; then
            ((MAJOR++))
            MINOR=0
            PATCH=0
          elif [[ "${{ env.VERSION_INCREMENT }}" == "minor" ]]; then
            ((MINOR++))
            PATCH=0
          elif [[ "${{ env.VERSION_INCREMENT }}" == "patch" ]]; then
            ((PATCH++))
          fi
  
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create tag
        run: |
          echo "${{ env.NEW_VERSION }}" # Display the new version for verification
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}
