name: Create Release Tag

on:
  pull_request:
    types:
      - closed

jobs:
  create-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Determine tag version
        id: determine_version
        run: |
          previous_version=$(cat version.txt)
          echo "Current version: $previous_version"

          # Get the pull request number
          pr_number=$(echo "${{ github.event.pull_request.url }}" | grep -oE '[0-9]+$')

          # Fetch the merge commit message using GitHub API
          merge_commit_msg=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${pr_number}/commits" | \
            jq -r '.[0].commit.message')

          major_keyword='MAJOR/major'
          minor_keyword='MINOR/minor'
          patch_keyword='PATCH/patch'

          if [[ "$merge_commit_msg" == *"$major_keyword"* ]]; then
            new_version=$(echo $previous_version | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1/')
            new_version=$((new_version + 1))
            new_tag="v${new_version}.0.0"
          elif [[ "$merge_commit_msg" == *"$minor_keyword"* ]]; then
            new_version=$(echo $previous_version | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\2/')
            new_version=$((new_version + 1))
            new_tag=$(echo $previous_version | sed -E "s/v[0-9]+\.[0-9]+\.[0-9]+/v0.${new_version}.0/")
          elif [[ "$merge_commit_msg" == *"$patch_keyword"* ]]; then
            new_version=$(echo $previous_version | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\3/')
            new_version=$((new_version + 1))
            new_tag=$(echo $previous_version | sed -E "s/v[0-9]+\.[0-9]+\.[0-9]+/v0.0.${new_version}/")
          else
            echo "No keyword found in the merge commit message. Skipping tag creation."
            exit 0
          fi

          echo "New tag version: $new_tag"
          echo $new_tag > version.txt
          echo "::set-output name=new_tag::$new_tag"

      - name: Create Git tag
        if: steps.determine_version.outputs.new_tag != 'v0.0.0'
        run: |
          git tag ${{ steps.determine_version.outputs.new_tag }}
          git push origin ${{ steps.determine_version.outputs.new_tag }}

      - name: Commit version.txt
        if: steps.determine_version.outputs.new_tag != 'v0.0.0'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version.txt
          git commit -m "Update version.txt with new tag"
          git push
