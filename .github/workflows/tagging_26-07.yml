name: Create Release Tag

on:
  pull_request:
    types:
      - closed

jobs:
  create-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout pull request branch
        uses: actions/checkout@v2

      - name: Determine tag version
        id: determine_version
        run: |
          previous_version=$(cat version.txt)
          echo "Current version: $previous_version"

          major_keyword='MAJOR'
          minor_keyword='MINOR'
          patch_keyword='PATCH'

          # Fetch pull request description
          pull_request_description=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | \
            jq -r '.body')

          echo "Pull request description: $pull_request_description"

          # Perform case-insensitive matching for keywords
          shopt -s nocasematch

          if [[ "$pull_request_description" == *"$major_keyword"* ]]; then
            new_version=$(echo $previous_version | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1/')
            new_version=$((new_version + 1))
            new_tag="v${new_version}.0.0"
          elif [[ "$pull_request_description" == *"$minor_keyword"* ]]; then
            new_version=$(echo $previous_version | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\2/')
            new_version=$((new_version + 1))
            new_tag=$(echo $previous_version | sed -E "s/v[0-9]+\.[0-9]+\.[0-9]+/v0.${new_version}.0/")
          elif [[ "$pull_request_description" == *"$patch_keyword"* ]]; then
            new_version=$(echo $previous_version | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\3/')
            new_version=$((new_version + 1))
            new_tag=$(echo $previous_version | sed -E "s/v[0-9]+\.[0-9]+\.[0-9]+/v0.0.${new_version}/")
          else
            echo "No keyword found in the pull request description. Skipping tag creation."
            exit 0
          fi

          # Disable case-insensitive matching
          shopt -u nocasematch

          echo "New tag version: $new_tag"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV

      - name: Delete existing version.txt file
        if: env.NEW_TAG != 'v0.0.0'
        run: |
          rm -f version.txt

      - name: Create new version.txt file
        if: env.NEW_TAG != 'v0.0.0'
        run: |
          echo $NEW_TAG > version.txt

      - name: Configure Git
        if: env.NEW_TAG != 'v0.0.0'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Commit and push changes
        if: env.NEW_TAG != 'v0.0.0'
        run: |
          git checkout -b update-version
          git add version.txt
          git commit -m "Update version to $NEW_TAG"
          git push origin update-version

      - name: Create Pull Request
        if: env.NEW_TAG != 'v0.0.0'
        run: |
          pull_request_title="Update version to $NEW_TAG"
          pull_request_body="This pull request updates the version to $NEW_TAG."

          curl -X POST "https://api.github.com/repos/${{ github.repository }}/pulls" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"title\":\"$pull_request_title\",\"body\":\"$pull_request_body\",\"head\":\"update-version\",\"base\":\"main\"}"
